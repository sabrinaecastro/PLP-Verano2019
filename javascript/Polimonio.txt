
/*Ejercicio 1, 2, 3 y 4*/


function Monomio (c,g) {
        this.c = c;
        this.g = g;
}

Monomio.prototype.evaluar = function (d) { return (this.c*Math.pow(d,this.g));};
Monomio.prototype.gradoMayor = function () {return (this.g);};
Monomio.prototype.coefDeGrado = function (d) { if (this.g==d) {return this.c;} else {return 0;};};

function Sumatoria (t1, t2) {
        this.t1 = t1;
        this.t2 = t2;
}

Sumatoria.prototype.evaluar = function (d) { return ((this.t1.evaluar(d)) + (this.t2.evaluar(d)));};
Sumatoria.prototype.gradoMayor = function () {return (Math.max (this.t1.gradoMayor(),this.t2.gradoMayor()));};
Sumatoria.prototype.coefDeGrado = function (d) {return (this.t1.coefDeGrado(d) + this.t2.coefDeGrado(d));};
Sumatoria.prototype.grado = function () {return (this.gradoDesde(this.gradoMayor()));};
Sumatoria.prototype.gradoDesde = function (n) 	{ if ( this.coefDeGrado(n)!=0 || n==0){
							return n;
						  } 
						  else {
							return this.gradoDesde(n-1);
						  }
};
Sumatoria.prototype.toString = function () {return (this.toStringDesde(this.gradoMayor()));};
Sumatoria.prototype.toStringDesde = function (n) { 
				if (n==0 && this.coefDeGrado(n)!=0){
					if (this.coefDeGrado(n)<0) {
						return (" - " + (this.coefDeGrado(n)*(-1)));
					}
					else {
						return (" + " + this.coefDeGrado(n));
					}							
				}
				if (n==1){
					if (this.coefDeGrado(n)<0) {
						return (" - " + (this.coefDeGrado(n)*(-1))+"x"  +  this.toStringDesde(n-1) );
					}
					else if (this.coefDeGrado(n)==1) {
						return (" + " +"x" +  this.toStringDesde(n-1) );
					}
					else if (this.coefDeGrado(n)>1) {
						return (" + " + this.coefDeGrado(n)+"x" +  this.toStringDesde(n-1) );
					}
					else{
						return (this.toStringDesde(n-1));
					}							
				}
				if (n>=2){
					if (this.coefDeGrado(n)<0) {
						return (" - " + (this.coefDeGrado(n)*(-1))+"x"+n.toString().sup() +  this.toStringDesde(n-1) );
					}
					else if (this.coefDeGrado(n)==1) {
						return (" + " + "x"+n.toString().sup()+  this.toStringDesde(n-1) );
					}
					else if (this.coefDeGrado(n)>1) {
						return (" + " + this.coefDeGrado(n)+"x"+n.toString().sup()+  this.toStringDesde(n-1) );
					}
					else{
						return (this.toStringDesde(n-1));
					}							
				}
				else {
					return ("");
				}
};
Sumatoria.prototype.aPolinomio = function () {
	return (this.aPolinomioDesde(this.grado()));
};
Sumatoria.prototype.aPolinomioDesde = function (n) {
	if (n==0 && (this.t1.coefDeGrado(n)+this.t2.coefDeGrado(n)!=0)){
		return (new Monomio(this.t1.coefDeGrado(n)+this.t2.coefDeGrado(n),n));
	} 
	else{
		let m = new Monomio(this.t1.coefDeGrado(n)+this.t2.coefDeGrado(n),n);
		return (new Sumatoria(m,this.aPolinomioDesde(n-1)));
	}
};

let m1 = new Monomio(7,2);
let m2 = new Monomio(8,1);
let m3 = new Monomio(-3,1);
let m4 = new Monomio(4,0);
let m5 = new Monomio(1,4);
let m6 = new Monomio(-1,4);
let m7 = new Monomio(1,3);

let st1 = new Sumatoria(m1,m2);
let st2 = new Sumatoria(m3,m4);
let s1 = new Sumatoria(st1,st2);

let st3 = new Sumatoria(m6,m7);
let s2 = new Sumatoria(m5,st3);

/* Ejercicio 3*/




