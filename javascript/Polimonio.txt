
/*Ejercicio 1-7/


function Monomio (c,g) {
        this.c = c;
        this.g = g;
}

Monomio.prototype.evaluar = function (d) { return (this.c*Math.pow(d,this.g));};
Monomio.prototype.gradoMayor = function () {return (this.g);};
Monomio.prototype.coefDeGrado = function (d) { if (this.g==d) {return this.c;} else {return 0;};};

function Sumatoria (t1, t2) {
        this.t1 = t1;
        this.t2 = t2;
}

Sumatoria.prototype.evaluar = function (d) { return ((this.t1.evaluar(d)) + (this.t2.evaluar(d)));};
Sumatoria.prototype.gradoMayor = function () {return (Math.max (this.t1.gradoMayor(),this.t2.gradoMayor()));};
Sumatoria.prototype.coefDeGrado = function (d) {return (this.t1.coefDeGrado(d) + this.t2.coefDeGrado(d));};
Sumatoria.prototype.grado = function () {return (this.gradoDesde(this.gradoMayor()));};
Sumatoria.prototype.gradoDesde = function (n) 	{ if ( this.coefDeGrado(n)!=0 || n==0){
							return n;
						  } 
						  else {
							return this.gradoDesde(n-1);
						  }
};
Sumatoria.prototype.toString = function () {return ( this.toStringDesde(this.grado(),this.grado()));};
Sumatoria.prototype.toStringDesde = function (n, mayorGrado) {
				if (n==0 && this.coefDeGrado(n)!=0){
              		return this.terminoIndependiente(mayorGrado);
				}
				else if (n==1){
                  	return this.terminoGradoUno(mayorGrado);
				}
				else if (n>=2){
                  	return this.terminoGradoMasDos(n,mayorGrado);
				}
				else {
					return ("");
				}
};
Sumatoria.prototype.terminoIndependiente = function (mayorGrado){
    if (this.coefDeGrado(0)<0 && 0==mayorGrado) {
      return this.coefDeGrado(0);
    }
    else if (this.coefDeGrado(0)<0 ) {
      return (" - " + (this.coefDeGrado(0)*(-1)));
    }
    else if (this.coefDeGrado(0)>0 && 0==mayorGrado) {
      return (this.coefDeGrado(0));
    }
    else if (this.coefDeGrado(0)>0){
      return (" + " + this.coefDeGrado(0));
    }
  	else{
      return "";
    }
};
Sumatoria.prototype.terminoGradoUno = function (mayorGrado){
    if (this.coefDeGrado(1)<0 && mayorGrado==1) {
		return ((this.coefDeGrado(1)*(-1))+"x"  +  this.toStringDesde(0,mayorGrado) );
    }
    else if (this.coefDeGrado(1)<0) {
		return (" - " + (this.coefDeGrado(1)*(-1))+"x"  +  this.toStringDesde(0,mayorGrado) );
    }
    else if (this.coefDeGrado(1)==1 && mayorGrado==1) {
      return ("x" +  this.toStringDesde(0, mayorGrado) );
    }
    else if (this.coefDeGrado(1)==1) {
      return (" + " +"x" +  this.toStringDesde(0,mayorGrado) );
    }
    else if (this.coefDeGrado(1)>1 && mayorGrado==1) {
      return ( this.coefDeGrado(1)+"x" +  this.toStringDesde(0,mayorGrado) );
    }
    else if (this.coefDeGrado(1)>1) {
      return (" + " + this.coefDeGrado(1)+"x" +  this.toStringDesde(0,mayorGrado) );
    }
    else{
      return (this.toStringDesde(0,mayorGrado));
    }			
};
Sumatoria.prototype.terminoGradoMasDos = function (n,mayorGrado){
  if (this.coefDeGrado(n)<0 && n==mayorGrado) {
    return ((this.coefDeGrado(n)*(-1))+"x"+n.toString().sup() +  this.toStringDesde(n-1,mayorGrado) );
  }
  else if (this.coefDeGrado(n)<0) {
    return (" - " + (this.coefDeGrado(n)*(-1))+"x"+n.toString().sup() +  this.toStringDesde(n-1,mayorGrado) );
  }
  else if (this.coefDeGrado(n)==1 && n==mayorGrado) {
    return ("x"+n.toString().sup()+  this.toStringDesde(n-1,mayorGrado) );
  }
  else if (this.coefDeGrado(n)==1) {
    return (" + " + "x"+n.toString().sup()+  this.toStringDesde(n-1,mayorGrado) );
  }
  else if (this.coefDeGrado(n)>1 && n==mayorGrado) {
    return ( this.coefDeGrado(n)+"x"+n.toString().sup()+  this.toStringDesde(n-1,mayorGrado) );
  }
  else if (this.coefDeGrado(n)>1) {
    return (" + " + this.coefDeGrado(n)+"x"+n.toString().sup()+  this.toStringDesde(n-1,mayorGrado) );
  }
  else{
    return (this.toStringDesde(n-1,mayorGrado));
  }							
};
Sumatoria.prototype.aPolinomio = function () {
	return (this.aPolinomioDesde(this.grado()));
};
Sumatoria.prototype.aPolinomioDesde = function (n) {
	if (n==0 && ((this.t1.coefDeGrado(n)+this.t2.coefDeGrado(n))!=0)){
		return (new Monomio((this.t1.coefDeGrado(n)+this.t2.coefDeGrado(n)),n));
	} 
	else if (n>0 && ((this.t1.coefDeGrado(n)+this.t2.coefDeGrado(n))!=0)){
		let m = new Monomio(this.t1.coefDeGrado(n)+this.t2.coefDeGrado(n),n);
		return (new Sumatoria(m,this.aPolinomioDesde(n-1)));
	}
  	else if (n>0){
		return (this.aPolinomioDesde(n-1));
    }
};

let m1 = new Monomio(7,2);
let m2 = new Monomio(8,1);
let m3 = new Monomio(-3,1);
let m4 = new Monomio(4,0);
let m5 = new Monomio(1,4);
let m6 = new Monomio(-1,4);
let m7 = new Monomio(1,3);
let m8 = new Monomio(1,4);
let m9 = new Monomio(1,0);

let st1 = new Sumatoria(m1,m2);
let st2 = new Sumatoria(m3,m4);
let s1 = new Sumatoria(st1,st2);

let st3 = new Sumatoria(m6,m7);
let s2 = new Sumatoria(m5,st3);
let s3 = new Sumatoria(m8,m9);



